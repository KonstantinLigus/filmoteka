{"mappings":"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","sources":["src/js/onFirstLoadPage.js","src/js/createGallery.js","src/js/createNumeration.js","src/js/onSubmitClick.js","src/js/onPageNumberClick.js"],"sourcesContent":["import { GetMovieApi } from './fetchMovies';\nimport { renderMovieCard } from './createGallery';\nimport { renderNumerationOfHome } from './createNumeration';\n\nconst getMovieApi = new GetMovieApi();\n\nwindow.addEventListener('DOMContentLoaded', onFirstLoadPage);\n\nexport async function onFirstLoadPage(event) {\n  try {\n    const data = await getMovieApi.fetchPopularMovie();\n    renderMovieCard(data.results);\n    renderNumerationOfHome(data.total_pages, data.page);\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n","import { gallery } from './references';\nimport { getGenre } from './genresOfMovies';\n\nexport function renderMovieCard(movies) {\n  gallery.innerHTML = createMovieCard(movies);\n}\n\nfunction createMovieCard(movies) {\n  return movies\n    .map(({ poster_path, title, genre_ids, release_date, id }) => {\n      const releaseDate = releaseDateChecker(release_date);\n      const titleUp = title.toUpperCase();\n      const poster = posterChecker(poster_path);\n      const genre = getGenre(genre_ids);\n\n      return `<li class=\"gallery__item\" id=${id}>\n        <img\n          class=\"gallery__img\"\n          src=\"${poster}\"\n          alt=${title}\n        />\n        <p class=\"gallery__name\">${titleUp}</p>\n        <p class=\"gallery__information\">${genre} | ${releaseDate}</p>\n    </li>`;\n    })\n    .join('');\n}\n\nfunction releaseDateChecker(release_date) {\n  if (release_date === '') {\n    return 'no info';\n  }\n  return release_date?.slice(0, 4);\n}\n\nfunction posterChecker(poster_path) {\n  if (poster_path === null) {\n    return (poster =\n      'https://via.placeholder.com/440x660.jpg?text=Image+Not+Found');\n  }\n  return `https://image.tmdb.org/t/p/w500${poster_path}`;\n}\n","import { paginationHome } from './references';\n// const element = document.querySelector('.pagination ul');\n// let totalPages = 25;\n// let page = 5;\n\n//виклик функції з передачею параметрів і додаванням внутрішнього елемента, який є тегом ul\n// element.innerHTML = createNumeration(totalPages, page);\n// export function createNumeration(totalPages, page) {\n//   let liTag = '';\n//   let active;\n//   let beforePage = page - 1;\n//   let afterPage = page + 1;\n//   if (page > 1) {\n//     //показує наступну кнопку, якщо значення сторінки більше 1\n//     liTag += `<li class=\"btn prev\" onclick=\"createNumeration(totalPages, ${\n//       page - 1\n//     })\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-left\" viewBox=\"0 0 16 16\">\n//     <path fill-rule=\"evenodd\" d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"/>\n//   </svg></li>`;\n//   }\n\n//   if (page > 2) {\n//     //якщо значення сторінки менше 2, додає 1 після попередньої кнопки\n//     liTag += `<li class=\"first numb\" onclick=\"createNumeration(totalPages, 1)\"><span>1</span></li>`;\n//     if (page > 3) {\n//       //якщо значення сторінки більше 3, додає (...) після першої li або сторінки\n//       liTag += `<li class=\"dots\"><span>...</span></li>`;\n//     }\n//   }\n\n//   // скільки сторінок або li відображається перед поточної li\n//   if (page == totalPages) {\n//     beforePage = beforePage - 2;\n//   } else if (page == totalPages - 1) {\n//     beforePage = beforePage - 1;\n//   }\n//   // скільки сторінок або li відображається після поточної li\n//   if (page == 1) {\n//     afterPage = afterPage + 2;\n//   } else if (page == 2) {\n//     afterPage = afterPage + 1;\n//   }\n\n//   for (var length = beforePage; length <= afterPage; length++) {\n//     if (length > totalPages) {\n//       //якщо довжина більша за загальну довжину сторінки, продовжує\n//       continue;\n//     }\n//     if (length == 0) {\n//       //якщо довжина дорівнює 0, додає +1 до значення довжини\n//       length = length + 1;\n//     }\n//     if (page == length) {\n//       //якщо сторінка дорівнює довжині, тоді призначає активний рядок в активній змінній\n//       active = 'active';\n//     } else {\n//       //інакше залишає порожнім активну змінну\n//       active = '';\n//     }\n//     liTag += `<li class=\"numb ${active}\" onclick=\"createNumeration(totalPages, ${length})\"><span>${length}</span></li>`;\n//   }\n\n//   if (page < totalPages - 1) {\n//     //якщо значення сторінки менше значення totalPage на -1, тоді відображає останню li або сторінку\n//     if (page < totalPages - 2) {\n//       //якщо значення сторінки менше значення totalPage на -2, додає (...) перед останньою li або сторінкою\n//       liTag += `<li class=\"dots\"><span>...</span></li>`;\n//     }\n//     liTag += `<li class=\"last numb\" onclick=\"createNumeration(totalPages, ${totalPages})\"><span>${totalPages}</span></li>`;\n//   }\n\n//   if (page < totalPages) {\n//     //показує наступну кнопку, якщо значення сторінки менше totalPage(20)\n//     liTag += `<li class=\"btn next\" onclick=\"createNumeration(totalPages, ${\n//       page + 1\n//     })\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-right\" viewBox=\"0 0 16 16\">\n//     <path fill-rule=\"evenodd\" d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\"/>\n//   </svg></li>`;\n//   }\n//   // paginationHome.innerHTML = liTag; //додає тег li в тег ul\n//   return liTag; //повертає тег li\n// }\n\n// My realization\nexport function renderNumerationOfHome(totalPages, page) {\n  paginationHome.innerHTML = createNumeration(totalPages, page); //додає тег li в тег ul\n}\n\nfunction createNumeration(totalPages, page) {\n  let liTag = '';\n  let active;\n  let beforePage = page - 1;\n  let afterPage = page + 1;\n  if (page > 1) {\n    //показує наступну кнопку, якщо значення сторінки більше 1\n    liTag += `<li class=\"btn prev\" data-totalPages=\"${totalPages}\" data-page=\"${\n      page - 1\n    }\"      \n    ><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-left\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"/>\n  </svg></li>`;\n  }\n\n  if (page > 2) {\n    //якщо значення сторінки менше 2, додає 1 після попередньої кнопки\n    liTag += `<li class=\"first numb\" data-totalPages=\"${totalPages}\" data-page=\"1\")\">1</li>`;\n    if (page > 3) {\n      //якщо значення сторінки більше 3, додає (...) після першої li або сторінки\n      liTag += `<li class=\"dots\">...</li>`;\n    }\n  }\n\n  // скільки сторінок або li відображається перед поточної li\n  if (page == totalPages) {\n    beforePage = beforePage - 2;\n  } else if (page == totalPages - 1) {\n    beforePage = beforePage - 1;\n  }\n  // скільки сторінок або li відображається після поточної li\n  if (page == 1) {\n    afterPage = afterPage + 2;\n  } else if (page == 2) {\n    afterPage = afterPage + 1;\n  }\n\n  for (var length = beforePage; length <= afterPage; length++) {\n    if (length > totalPages) {\n      //якщо довжина більша за загальну довжину сторінки, продовжує\n      continue;\n    }\n    if (length == 0) {\n      //якщо довжина дорівнює 0, додає +1 до значення довжини\n      length = length + 1;\n    }\n    if (page == length) {\n      //якщо сторінка дорівнює довжині, тоді призначає активний рядок в активній змінній\n      active = 'active';\n    } else {\n      //інакше залишає порожнім активну змінну\n      active = '';\n    }\n    liTag += `<li class=\"numb ${active}\" data-totalPages=\"${totalPages}\" data-page=\"${length}\">${length}</li>`;\n  }\n\n  if (page < totalPages - 1) {\n    //якщо значення сторінки менше значення totalPage на -1, тоді відображає останню li або сторінку\n    if (page < totalPages - 2) {\n      //якщо значення сторінки менше значення totalPage на -2, додає (...) перед останньою li або сторінкою\n      liTag += `<li class=\"dots\">...</li>`;\n    }\n    liTag += `<li class=\"last numb\" data-totalPages=\"${totalPages}\" data-page=\"${totalPages}\">${totalPages}</li>`;\n  }\n\n  if (page < totalPages) {\n    //показує наступну кнопку, якщо значення сторінки менше totalPage(20)\n    liTag += `<li class=\"btn next\" data-totalPages=\"${totalPages}\" data-page=\"${\n      page + 1\n    }\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-right\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\"/>\n  </svg></li>`;\n  }\n  // paginationHome.innerHTML = liTag; //додає тег li в тег ul\n  return liTag; //повертає тег li\n}\n","import { form } from './references';\nimport { noSuccess } from './references';\nimport { renderMovieCard } from './createGallery'\nimport { GetMovieApi } from './fetchMovies';\nimport { renderNumerationOfHome } from './createNumeration';\n\nconst getMovieApi = new GetMovieApi();\nexport let inputValue = '';\n\nform.addEventListener('submit', onSubmitClick);\n\n//Получение данных с инпута\nexport function onSubmitClick(e) {\n  e.preventDefault();\n  inputValue = e.target.elements.text.value.trim();\n  // Проверка инпута на пустую строку\n  if (inputValue === '') {\n    noSuccess.classList.add('visible');\n    return;\n  } else {\n    noSuccess.classList.remove('visible');\n  }\n  // Search movies\n  searchMoviesAndRender(inputValue);\n  clearInput();\n}\n\nasync function searchMoviesAndRender(inputValue) {\n  try {\n    getMovieApi.resetPage();\n    const data = await getMovieApi.fetchSearchedMovie(inputValue);\n    if (data.results.length === 0) {\n      noSuccess.classList.add('visible');\n    }\n    // Render gallery\n    renderMovieCard(data.results);\n    renderNumerationOfHome(data.total_pages, data.page);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction clearInput() {\n  form.reset();\n}\n","import { paginationHome } from './references';\nimport {\n  isFetchPopularMovie,\n  isFetchSearchedMovie,\n  GetMovieApi,\n} from './fetchMovies';\nimport { inputValue } from './onSubmitClick';\nimport { renderMovieCard } from './createGallery';\nimport { renderNumerationOfHome } from './createNumeration';\n\ngetMovieApi = new GetMovieApi();\n\npaginationHome.addEventListener('click', onPageNumberClick);\n\nexport function onPageNumberClick(event) {\n  checkFetchPopularMovie(event);\n  checkFetchSearchedMovie(event);\n}\n\nfunction checkFetchPopularMovie(event) {\n  if (isFetchPopularMovie) {\n    // if (event.target.classList.contains('numb')) {\n    popularMoviesAndRender(event);\n    // }\n  }\n}\n\nfunction checkFetchSearchedMovie(event) {\n  if (isFetchSearchedMovie) {\n    // if (event.target.classList.contains('numb')) {\n    searchMoviesAndRender(event, inputValue);\n    // }\n  }\n}\n\nasync function searchMoviesAndRender(event, inputValue) {\n  try {\n    getMovieApi.setPage(event.target.dataset.page);\n    const data = await getMovieApi.fetchSearchedMovie(inputValue);\n    renderMovieCard(data.results);\n    renderNumerationOfHome(data.total_pages, data.page);\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function popularMoviesAndRender(event) {\n  try {\n    getMovieApi.setPage(event.target.dataset.page);\n    const data = await getMovieApi.fetchPopularMovie();\n    renderMovieCard(data.results);\n    renderNumerationOfHome(data.total_pages, data.page);\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["$1TPJ0","parcelRequire","$1sEOH","$84c4c517af77e8fa$export$605b145a07818080","movies","gallery","innerHTML","map","poster_path","title","genre_ids","release_date","id","releaseDate","slice","$84c4c517af77e8fa$var$releaseDateChecker","titleUp","toUpperCase","$84c4c517af77e8fa$var$posterChecker","$3JWO1","getGenre","join","$84c4c517af77e8fa$var$createMovieCard","poster","$7f24dc659859913c$export$6e1dfc51509ef0be","totalPages","page","paginationHome","active","liTag","beforePage","afterPage","length","$7f24dc659859913c$var$createNumeration","$c68f07576e460747$var$getMovieApi","GetMovieApi","window","addEventListener","async","event","data","fetchPopularMovie","results","total_pages","error","console","message","$bfdabf2fe8c92a6d$var$getMovieApi","$bfdabf2fe8c92a6d$export$1de20867395b8910","form","e","preventDefault","target","elements","text","value","trim","noSuccess","classList","add","remove","inputValue1","resetPage","fetchSearchedMovie","$bfdabf2fe8c92a6d$var$searchMoviesAndRender","reset","getMovieApi","isFetchPopularMovie","setPage","dataset","$edbba020a88889f0$var$popularMoviesAndRender","$edbba020a88889f0$var$checkFetchPopularMovie","isFetchSearchedMovie","$edbba020a88889f0$var$searchMoviesAndRender","$edbba020a88889f0$var$checkFetchSearchedMovie"],"version":3,"file":"index.5422f46c.js.map"}